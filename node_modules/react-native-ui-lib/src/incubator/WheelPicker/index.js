import _pt from "prop-types";
// TODO: Support onChange callback
// TODO: Support style customization
// TODO: Support control of visible items
import React, { useCallback, useRef, useMemo } from 'react';
import { FlatList } from 'react-native';
import Animated from 'react-native-reanimated';
import { onScrollEvent, useValues } from 'react-native-redash';
import { Colors } from '../../../src/style';
import View from '../../components/view';
import Fader, { FaderPosition } from '../../components/fader';
import { Constants } from '../../helpers';
import useMiddleIndex from './helpers/useListMiddleIndex';
import Item from './Item';
const AnimatedFlatList = Animated.createAnimatedComponent(FlatList);

const WheelPicker = ({
  items,
  itemHeight = 48,
  activeTextColor,
  inactiveTextColor,
  textStyle,
  onChange: onChangeEvent
}) => {
  const height = itemHeight * 5;
  const scrollView = useRef();
  const [offset] = useValues([0], []);
  const onScroll = onScrollEvent({
    y: offset
  });
  const listSize = items?.length || 0;
  const middleIndex = useMiddleIndex({
    itemHeight,
    listSize
  });
  const selectItem = useCallback(index => {
    if (scrollView.current?.getNode()) {
      //@ts-ignore for some reason scrollToOffset isn't recognized
      scrollView.current?.getNode()?.scrollToOffset({
        offset: index * itemHeight,
        animated: true
      });
    }
  }, [itemHeight]);
  const onChange = useCallback(event => {
    const index = middleIndex(event.nativeEvent.contentOffset.y);
    onChangeEvent(index, items?.[index]);
  }, []);
  const renderItem = useCallback(({
    item,
    index
  }) => {
    return <Item index={index} itemHeight={itemHeight} offset={offset} activeColor={activeTextColor} inactiveColor={inactiveTextColor} style={textStyle} {...item} onSelect={selectItem} />;
  }, [itemHeight]);
  const fader = useMemo(() => position => {
    return <Fader visible position={position} size={60} />;
  }, []);
  const separators = useMemo(() => {
    return <View absF centerV pointerEvents="none">
        <View style={{
        borderTopWidth: 1,
        borderBottomWidth: 1,
        height: itemHeight,
        borderColor: Colors.grey50
      }} />
      </View>;
  }, []);
  return <View>
      <View width={250} height={height} br20>
        <AnimatedFlatList data={items} keyExtractor={keyExtractor} scrollEventThrottle={100} onScroll={onScroll} onMomentumScrollEnd={onChange} showsVerticalScrollIndicator={false} // @ts-ignore
      ref={scrollView} contentContainerStyle={{
        paddingVertical: height / 2 - itemHeight / 2
      }} snapToInterval={itemHeight} decelerationRate={Constants.isAndroid ? 0.98 : 'normal'} renderItem={renderItem} />
        {fader(FaderPosition.BOTTOM)}
        {fader(FaderPosition.TOP)}
        {separators}
      </View>
    </View>;
};

WheelPicker.propTypes = {
  /**
     * Data source for WheelPicker
     */
  items: _pt.array,

  /**
     * Describe the height of each item in the WheelPicker
     */
  itemHeight: _pt.number,

  /**
     * Text color for the focused row
     */
  activeTextColor: _pt.string,

  /**
     * Text color for other, non-focused rows
     */
  inactiveTextColor: _pt.string,

  /**
     * Event, on active row change
     */
  onChange: _pt.func.isRequired
};

const keyExtractor = item => `${item.value}`;

export default WheelPicker;